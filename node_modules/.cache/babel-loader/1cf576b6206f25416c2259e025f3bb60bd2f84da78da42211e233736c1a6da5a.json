{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nfunction useLocalStorage(itemName, initialValue) {\n  _s();\n  const [item, setItem] = React.useState(initialValue);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(false);\n  React.useEffect(() => {\n    setTimeout(() => {\n      try {\n        const localStorageItem = localStorage.getItem(itemName);\n        let parsedItem;\n        if (!localStorageItem) {\n          localStorage.setItem(itemName, JSON.stringify(initialValue));\n          parsedItem = initialValue;\n        } else {\n          parsedItem = JSON.parse(localStorageItem);\n          setItem(parsedItem);\n        }\n        setLoading(false);\n      } catch (error) {\n        setLoading(false);\n        setError(true);\n      }\n    }, 2000);\n  }, []);\n  const saveItem = newItem => {\n    localStorage.setItem(itemName, JSON.stringify(newItem));\n    setItem(newItem);\n  };\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n_s(useLocalStorage, \"L1pwWrQdHJj0Ut0FlTd8rVfqcfE=\");\nexport { useLocalStorage };\n\n// localStorage.removeItem('FOOD_V1');\n// const parsedFoods =[\n//     {text: 'Apples', completed: true},\n//     {text: 'Tomatoes', completed: false},\n//     {text: 'Lettuce', completed: true},\n//     {text: 'Potatoes', completed: false},\n//     {text: 'Carrots', completed: false},\n//     {text: 'Chicken', completed: false},\n//     {text: 'Ground beef', completed: false},\n//     {text: 'Fish (Tilapia - Tuna)', completed: false},\n//     {text: 'MIlk - (six pack)', completed: false},\n//     {text: 'Yogurt Greek', completed: false},\n//     {text: 'Eggs', completed: false},\n//     {text: 'Rice', completed: false},\n//     {text: 'Pasta', completed: false},\n//     {text: 'Whole-grain Bread', completed: false},\n//     {text: 'Oats', completed: false},\n//     {text: 'Olive oil', completed: false},\n//     {text: 'Salt and pepper', completed: false},\n//     {text: 'Sugar', completed: false},\n//     {text: 'Coffee and tea', completed: false},\n// ];\n// localStorage.setItem('FOOD_V1', JSON.stringify(parsedFoods));","map":{"version":3,"names":["React","useLocalStorage","itemName","initialValue","item","setItem","useState","loading","setLoading","error","setError","useEffect","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","stringify","parse","saveItem","newItem"],"sources":["/home/juanito/Documents/Cursos para FRONTEND-NOV-04-2024/curso-react-intro/src/ListContext/useLocalStorage.js"],"sourcesContent":["import React from \"react\";\n\nfunction useLocalStorage( itemName, initialValue){\n    const  [item, setItem] =React.useState(initialValue);\n\n    const  [loading, setLoading] =React.useState(true);\n    const  [error, setError] =React.useState(false);\n\n    React.useEffect(() =>{\n\n      setTimeout(() =>{\n        try {\n          const  localStorageItem = localStorage.getItem(itemName);\n  \n          let parsedItem;\n    \n          if (!localStorageItem) {\n            localStorage.setItem(itemName, JSON.stringify(initialValue));\n            parsedItem = initialValue;\n    \n            } else {\n                      parsedItem = JSON.parse(localStorageItem);\n                      setItem(parsedItem);\n            }\n            setLoading(false);\n        } catch (error) {\n          setLoading(false);\n          setError(true);\n        }\n      },2000);\n    },[]);\n\n  const saveItem = (newItem) => {\n    localStorage.setItem(itemName,JSON.stringify(newItem));\n    setItem(newItem);\n};\n\nreturn {\n  item, \n  saveItem,\n  loading,\n  error,\n};\n}\n\nexport { useLocalStorage }\n\n// localStorage.removeItem('FOOD_V1');\n// const parsedFoods =[\n//     {text: 'Apples', completed: true},\n//     {text: 'Tomatoes', completed: false},\n//     {text: 'Lettuce', completed: true},\n//     {text: 'Potatoes', completed: false},\n//     {text: 'Carrots', completed: false},\n//     {text: 'Chicken', completed: false},\n//     {text: 'Ground beef', completed: false},\n//     {text: 'Fish (Tilapia - Tuna)', completed: false},\n//     {text: 'MIlk - (six pack)', completed: false},\n//     {text: 'Yogurt Greek', completed: false},\n//     {text: 'Eggs', completed: false},\n//     {text: 'Rice', completed: false},\n//     {text: 'Pasta', completed: false},\n//     {text: 'Whole-grain Bread', completed: false},\n//     {text: 'Oats', completed: false},\n//     {text: 'Olive oil', completed: false},\n//     {text: 'Salt and pepper', completed: false},\n//     {text: 'Sugar', completed: false},\n//     {text: 'Coffee and tea', completed: false},\n// ];\n// localStorage.setItem('FOOD_V1', JSON.stringify(parsedFoods));"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,CAAEC,QAAQ,EAAEC,YAAY,EAAC;EAAA;EAC7C,MAAO,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAEL,KAAK,CAACM,QAAQ,CAACH,YAAY,CAAC;EAEpD,MAAO,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAER,KAAK,CAACM,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAO,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAEV,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;EAE/CN,KAAK,CAACW,SAAS,CAAC,MAAK;IAEnBC,UAAU,CAAC,MAAK;MACd,IAAI;QACF,MAAOC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAACb,QAAQ,CAAC;QAExD,IAAIc,UAAU;QAEd,IAAI,CAACH,gBAAgB,EAAE;UACrBC,YAAY,CAACT,OAAO,CAACH,QAAQ,EAAEe,IAAI,CAACC,SAAS,CAACf,YAAY,CAAC,CAAC;UAC5Da,UAAU,GAAGb,YAAY;QAEzB,CAAC,MAAM;UACGa,UAAU,GAAGC,IAAI,CAACE,KAAK,CAACN,gBAAgB,CAAC;UACzCR,OAAO,CAACW,UAAU,CAAC;QAC7B;QACAR,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdD,UAAU,CAAC,KAAK,CAAC;QACjBE,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,EAAC,IAAI,CAAC;EACT,CAAC,EAAC,EAAE,CAAC;EAEP,MAAMU,QAAQ,GAAIC,OAAO,IAAK;IAC5BP,YAAY,CAACT,OAAO,CAACH,QAAQ,EAACe,IAAI,CAACC,SAAS,CAACG,OAAO,CAAC,CAAC;IACtDhB,OAAO,CAACgB,OAAO,CAAC;EACpB,CAAC;EAED,OAAO;IACLjB,IAAI;IACJgB,QAAQ;IACRb,OAAO;IACPE;EACF,CAAC;AACD;AAAC,GAzCQR,eAAe;AA2CxB,SAASA,eAAe;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}